-- 테이블 순서는 관계를 고려하여 한 번에 실행해도 에러가 발생하지 않게 정렬되었습니다.

-- TPFILE Table Create SQL
CREATE TABLE TPFILE
(
    F_ID      NUMBER           NOT NULL, 
    F_NAME    VARCHAR2(100)    NOT NULL, 
    F_PATH    VARCHAR2(100)    NOT NULL, 
    CONSTRAINT F_ID PRIMARY KEY (F_ID)
)
/

CREATE SEQUENCE TPFILE_SEQ
START WITH 1
INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER TPFILE_AI_TRG
BEFORE INSERT ON TPFILE 
REFERENCING NEW AS NEW FOR EACH ROW 
BEGIN 
    SELECT TPFILE_SEQ.NEXTVAL
    INTO :NEW.F_ID
    FROM DUAL;
END;
/

--DROP TRIGGER TPFILE_AI_TRG;
/

--DROP SEQUENCE TPFILE_SEQ;
/

COMMENT ON TABLE TPFILE IS 'TV프로그램 파일업로드'
/

COMMENT ON COLUMN TPFILE.F_ID IS '파일ID'
/

COMMENT ON COLUMN TPFILE.F_NAME IS '파일이름'
/

COMMENT ON COLUMN TPFILE.F_PATH IS '파일경로'
/


-- TVPROGRAM Table Create SQL
CREATE TABLE TVPROGRAM
(
    TP_ID         NUMBER           NOT NULL, 
    TP_NAME       VARCHAR2(100)    NULL, 
    TP_MEMBER     VARCHAR2(200)    NULL, 
    TP_GENRE      VARCHAR2(20)     NOT NULL, 
    TP_BRDCS      VARCHAR2(20)     NOT NULL, 
    TP_COUNTRY    VARCHAR2(20)     NOT NULL, 
    TP_CONTENT    VARCHAR2(500)    NULL, 
    CONSTRAINT TP_ID PRIMARY KEY (TP_ID)
)
/

CREATE SEQUENCE TVPROGRAM_SEQ
START WITH 1
INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER TVPROGRAM_AI_TRG
BEFORE INSERT ON TVPROGRAM 
REFERENCING NEW AS NEW FOR EACH ROW 
BEGIN 
    SELECT TVPROGRAM_SEQ.NEXTVAL
    INTO :NEW.TP_ID
    FROM DUAL;
END;
/

--DROP TRIGGER TVPROGRAM_AI_TRG;
/

--DROP SEQUENCE TVPROGRAM_SEQ;
/

COMMENT ON TABLE TVPROGRAM IS 'TV프로그램(TP)'
/

COMMENT ON COLUMN TVPROGRAM.TP_ID IS 'TPID'
/

COMMENT ON COLUMN TVPROGRAM.TP_NAME IS 'TP이름'
/

COMMENT ON COLUMN TVPROGRAM.TP_MEMBER IS 'TP출연진'
/

COMMENT ON COLUMN TVPROGRAM.TP_GENRE IS 'TP장르'
/

COMMENT ON COLUMN TVPROGRAM.TP_BRDCS IS 'TP방송사'
/

COMMENT ON COLUMN TVPROGRAM.TP_COUNTRY IS 'TP제작국'
/

COMMENT ON COLUMN TVPROGRAM.TP_CONTENT IS 'TP내용'
/


-- B_WRITER Table Create SQL
CREATE TABLE B_WRITER
(
    B_WR_ID      NUMBER           NOT NULL, 
    B_WRITER     VARCHAR2(20)     NOT NULL, 
    B_WR_INFO    VARCHAR2(500)    NOT NULL, 
    CONSTRAINT B_WR_ID PRIMARY KEY (B_WR_ID)
)
/

CREATE SEQUENCE B_WRITER_SEQ
START WITH 1
INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER B_WRITER_AI_TRG
BEFORE INSERT ON B_WRITER 
REFERENCING NEW AS NEW FOR EACH ROW 
BEGIN 
    SELECT B_WRITER_SEQ.NEXTVAL
    INTO :NEW.B_WR_ID
    FROM DUAL;
END;
/

--DROP TRIGGER B_WRITER_AI_TRG;
/

--DROP SEQUENCE B_WRITER_SEQ;
/

COMMENT ON TABLE B_WRITER IS '책저자'
/

COMMENT ON COLUMN B_WRITER.B_WR_ID IS '저자번호'
/

COMMENT ON COLUMN B_WRITER.B_WRITER IS '저자'
/

COMMENT ON COLUMN B_WRITER.B_WR_INFO IS '저자소개'
/


-- MEMBER Table Create SQL
CREATE TABLE MEMBER
(
    MEMBER_ID    NUMBER          NOT NULL, 
    NICKNAME     VARCHAR2(20)    NOT NULL, 
    NAME         VARCHAR2(20)    NOT NULL, 
    PHONE        VARCHAR2(20)    NOT NULL, 
    EMAIL        VARCHAR2(40)    NOT NULL, 
    LOGIN_ID     VARCHAR2(40)    NOT NULL, 
    LOGIN_PW     VARCHAR2(40)    NOT NULL, 
    BRITH        VARCHAR2(40)    NOT NULL, 
    CONSTRAINT MEMBER_ID PRIMARY KEY (MEMBER_ID)
)
/

CREATE SEQUENCE MEMBER_SEQ
START WITH 1
INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER MEMBER_AI_TRG
BEFORE INSERT ON MEMBER 
REFERENCING NEW AS NEW FOR EACH ROW 
BEGIN 
    SELECT MEMBER_SEQ.NEXTVAL
    INTO :NEW.MEMBER_ID
    FROM DUAL;
END;
/

--DROP TRIGGER MEMBER_AI_TRG;
/

--DROP SEQUENCE MEMBER_SEQ;
/

COMMENT ON TABLE MEMBER IS '회원'
/

COMMENT ON COLUMN MEMBER.MEMBER_ID IS '회원번호'
/

COMMENT ON COLUMN MEMBER.NICKNAME IS '별칭'
/

COMMENT ON COLUMN MEMBER.NAME IS '이름'
/

COMMENT ON COLUMN MEMBER.PHONE IS '전화번호'
/

COMMENT ON COLUMN MEMBER.EMAIL IS 'EMAIL'
/

COMMENT ON COLUMN MEMBER.LOGIN_ID IS '로그인아이디'
/

COMMENT ON COLUMN MEMBER.LOGIN_PW IS '로그인비번'
/

COMMENT ON COLUMN MEMBER.BRITH IS '생년월일'
/


-- MOVIE Table Create SQL
CREATE TABLE MOVIE
(
    MOVIE_ID    NUMBER            NOT NULL, 
    TITLE       VARCHAR2(100)     NOT NULL, 
    GENRE       VARCHAR2(20)      NULL, 
    YEAR        VARCHAR2(20)      NULL, 
    GRADE       VARCHAR2(20)      NULL, 
    DIRECTOR    VARCHAR2(20)      NULL, 
    CAST        VARCHAR2(100)     NULL, 
    STORY       VARCHAR2(2000)    NULL, 
    CONSTRAINT MOVIE_ID PRIMARY KEY (MOVIE_ID)
)
/

CREATE SEQUENCE MOVIE_SEQ
START WITH 1
INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER MOVIE_AI_TRG
BEFORE INSERT ON MOVIE 
REFERENCING NEW AS NEW FOR EACH ROW 
BEGIN 
    SELECT MOVIE_SEQ.NEXTVAL
    INTO :NEW.MOVIE_ID
    FROM DUAL;
END;
/

--DROP TRIGGER MOVIE_AI_TRG;
/

--DROP SEQUENCE MOVIE_SEQ;
/

COMMENT ON TABLE MOVIE IS '영화'
/

COMMENT ON COLUMN MOVIE.MOVIE_ID IS '영화번호'
/

COMMENT ON COLUMN MOVIE.TITLE IS '영화제목'
/

COMMENT ON COLUMN MOVIE.GENRE IS '장르'
/

COMMENT ON COLUMN MOVIE.YEAR IS '개봉연도'
/

COMMENT ON COLUMN MOVIE.GRADE IS '등급'
/

COMMENT ON COLUMN MOVIE.DIRECTOR IS '감독'
/

COMMENT ON COLUMN MOVIE.CAST IS '출연진'
/

COMMENT ON COLUMN MOVIE.STORY IS '줄거리'
/


-- BOOK Table Create SQL
CREATE TABLE BOOK
(
    B_ID          NUMBER            NOT NULL, 
    B_WR_ID       NUMBER            NOT NULL, 
    B_CATEGORY    VARCHAR2(30)      NOT NULL, 
    B_NAME        VARCHAR2(30)      NOT NULL, 
    B_INFO        VARCHAR2(1500)    NOT NULL, 
    B_INDEX       VARCHAR2(500)     NOT NULL, 
    CONSTRAINT B_ID PRIMARY KEY (B_ID)
)
/

COMMENT ON TABLE BOOK IS '책'
/

COMMENT ON COLUMN BOOK.B_ID IS '책번호'
/

COMMENT ON COLUMN BOOK.B_WR_ID IS '저자번호'
/

COMMENT ON COLUMN BOOK.B_CATEGORY IS '장르'
/

COMMENT ON COLUMN BOOK.B_NAME IS '책이름'
/

COMMENT ON COLUMN BOOK.B_INFO IS '책소개'
/

COMMENT ON COLUMN BOOK.B_INDEX IS '책목차'
/

ALTER TABLE BOOK
    ADD CONSTRAINT FK_BOOK_B_WR_ID_B_WRITER_B_WR_ FOREIGN KEY (B_WR_ID)
        REFERENCES B_WRITER (B_WR_ID)
/


-- MOVIEBOARD Table Create SQL
CREATE TABLE MOVIEBOARD
(
    BOARD_ID         NUMBER            NOT NULL, 
    MOVIE_ID         NUMBER            NOT NULL, 
    MEMBER_ID        NUMBER            NOT NULL, 
    SUBJECT          VARCHAR2(100)     NOT NULL, 
    BOARD_CONTENT    VARCHAR2(2000)    NOT NULL, 
    BOARD_DATE       DATE              NOT NULL, 
    HIT              NUMBER            NOT NULL, 
    CONSTRAINT BOARD_ID PRIMARY KEY (BOARD_ID)
)
/

CREATE SEQUENCE MOVIEBOARD_SEQ
START WITH 1
INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER MOVIEBOARD_AI_TRG
BEFORE INSERT ON MOVIEBOARD 
REFERENCING NEW AS NEW FOR EACH ROW 
BEGIN 
    SELECT MOVIEBOARD_SEQ.NEXTVAL
    INTO :NEW.BOARD_ID
    FROM DUAL;
END;
/


--DROP TRIGGER MOVIEBOARD_AI_TRG;
/

--DROP SEQUENCE MOVIEBOARD_SEQ;
/

COMMENT ON TABLE MOVIEBOARD IS '영화게시판'
/

COMMENT ON COLUMN MOVIEBOARD.BOARD_ID IS '게시판번호'
/

COMMENT ON COLUMN MOVIEBOARD.MOVIE_ID IS '영화번호'
/

COMMENT ON COLUMN MOVIEBOARD.MEMBER_ID IS '회원번호'
/

COMMENT ON COLUMN MOVIEBOARD.SUBJECT IS '글제목'
/

COMMENT ON COLUMN MOVIEBOARD.BOARD_CONTENT IS '글내용'
/

COMMENT ON COLUMN MOVIEBOARD.BOARD_DATE IS '날짜'
/

COMMENT ON COLUMN MOVIEBOARD.HIT IS '조회수'
/

ALTER TABLE MOVIEBOARD
    ADD CONSTRAINT FK_MOVIEBOARD_MEMBER_ID_MEMBER FOREIGN KEY (MEMBER_ID)
        REFERENCES MEMBER (MEMBER_ID)
/

ALTER TABLE MOVIEBOARD
    ADD CONSTRAINT FK_MOVIEBOARD_MOVIE_ID_MOVIE_M FOREIGN KEY (MOVIE_ID)
        REFERENCES MOVIE (MOVIE_ID)
/


-- BOARD Table Create SQL
CREATE TABLE BOARD
(
    BOARD_ID      NUMBER          NOT NULL, 
    F_ID          NUMBER          NOT NULL, 
    MEMBER_ID     NUMBER          NOT NULL, 
    TP_ID         NUMBER          NOT NULL, 
    WRITER        VARCHAR2(20)    NOT NULL, 
    TITLE         VARCHAR2(20)    NOT NULL, 
    B_CONTENT     VARCHAR2(20)    NOT NULL, 
    B_REGDATE     DATE            NOT NULL, 
    UPDATEDATE    DATE            NULL, 
    DELETEDATE    DATE            NULL, 
    HIT           NUMBER          NOT NULL, 
    B_UPDOWN      NUMBER          NOT NULL, 
    CONSTRAINT BOARD_ID PRIMARY KEY (BOARD_ID)
)
/

CREATE SEQUENCE BOARD_SEQ
START WITH 1
INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER BOARD_AI_TRG
BEFORE INSERT ON BOARD 
REFERENCING NEW AS NEW FOR EACH ROW 
BEGIN 
    SELECT BOARD_SEQ.NEXTVAL
    INTO :NEW.BOARD_ID
    FROM DUAL;
END;
/

--DROP TRIGGER BOARD_AI_TRG;
/

--DROP SEQUENCE BOARD_SEQ;
/

CREATE OR REPLACE TRIGGER BOARD_AI_TRG
BEFORE INSERT ON BOARD 
REFERENCING NEW AS NEW FOR EACH ROW 
BEGIN 
    SELECT BOARD_SEQ.NEXTVAL
    INTO :NEW.F_ID
    FROM DUAL;
END;
/

--DROP TRIGGER BOARD_AI_TRG;
/

--DROP SEQUENCE BOARD_SEQ;
/

COMMENT ON TABLE BOARD IS 'TV프로그램 게시판'
/

COMMENT ON COLUMN BOARD.BOARD_ID IS '게시글번호'
/

COMMENT ON COLUMN BOARD.F_ID IS '파일ID'
/

COMMENT ON COLUMN BOARD.MEMBER_ID IS '회원번호'
/

COMMENT ON COLUMN BOARD.TP_ID IS 'TPID'
/

COMMENT ON COLUMN BOARD.WRITER IS '작성자'
/

COMMENT ON COLUMN BOARD.TITLE IS '제목'
/

COMMENT ON COLUMN BOARD.B_CONTENT IS '내용'
/

COMMENT ON COLUMN BOARD.B_REGDATE IS '등록일자'
/

COMMENT ON COLUMN BOARD.UPDATEDATE IS '수정일자'
/

COMMENT ON COLUMN BOARD.DELETEDATE IS '삭제일자'
/

COMMENT ON COLUMN BOARD.HIT IS '조회수'
/

COMMENT ON COLUMN BOARD.B_UPDOWN IS '좋아요'
/

ALTER TABLE BOARD
    ADD CONSTRAINT FK_BOARD_MEMBER_ID_MEMBER_MEMB FOREIGN KEY (MEMBER_ID)
        REFERENCES MEMBER (MEMBER_ID)
/

ALTER TABLE BOARD
    ADD CONSTRAINT FK_BOARD_F_ID_TPFILE_F_ID FOREIGN KEY (F_ID)
        REFERENCES TPFILE (F_ID)
/

ALTER TABLE BOARD
    ADD CONSTRAINT FK_BOARD_TP_ID_TVPROGRAM_TP_ID FOREIGN KEY (TP_ID)
        REFERENCES TVPROGRAM (TP_ID)
/


-- FOOD Table Create SQL
CREATE TABLE FOOD
(
    FOOD_ID         NUMBER           NOT NULL, 
    TITLE           VARCHAR2(40)     NOT NULL, 
    CATEGORY        VARCHAR2(40)     NOT NULL, 
    BUSINESSTIME    VARCHAR2(40)     NOT NULL, 
    DETAILS         NVARCHAR2(40)    NOT NULL, 
    CONSTRAINT FOOD_ID PRIMARY KEY (FOOD_ID)
)
/

COMMENT ON TABLE FOOD IS '음식'
/

COMMENT ON COLUMN FOOD.FOOD_ID IS '음식점번호'
/

COMMENT ON COLUMN FOOD.TITLE IS '음식점명'
/

COMMENT ON COLUMN FOOD.CATEGORY IS '분류명'
/

COMMENT ON COLUMN FOOD.BUSINESSTIME IS '영업시간'
/

COMMENT ON COLUMN FOOD.DETAILS IS '상세정보'
/


-- CATEGORY Table Create SQL
CREATE TABLE CATEGORY
(
    CATEGORY_ID    NUMBER          NOT NULL, 
    NAME           VARCHAR2(40)    NULL, 
    CONSTRAINT CATEGORY_ID PRIMARY KEY (CATEGORY_ID)
)
/

COMMENT ON COLUMN CATEGORY.CATEGORY_ID IS '분류번호'
/

COMMENT ON COLUMN CATEGORY.NAME IS '분류명'
/


-- REGION Table Create SQL
CREATE TABLE REGION
(
    REGION_ID    NUMBER          NOT NULL, 
    NAME         VARCHAR2(40)    NULL, 
    CONSTRAINT REGION_ID PRIMARY KEY (REGION_ID)
)
/

COMMENT ON COLUMN REGION.REGION_ID IS '지역코드'
/

COMMENT ON COLUMN REGION.NAME IS '지역명'
/


-- TV_SCORE Table Create SQL
CREATE TABLE TV_SCORE
(
    MEMBER_ID    NUMBER    NOT NULL, 
    TP_ID        NUMBER    NOT NULL, 
    TV_SCORE     NUMBER    NULL   
)
/

COMMENT ON COLUMN TV_SCORE.MEMBER_ID IS '회원번호'
/

COMMENT ON COLUMN TV_SCORE.TP_ID IS 'TV'
/

COMMENT ON COLUMN TV_SCORE.TV_SCORE IS '평점'
/

ALTER TABLE TV_SCORE
    ADD CONSTRAINT FK_TV_SCORE_MEMBER_ID_MEMBER_M FOREIGN KEY (MEMBER_ID)
        REFERENCES MEMBER (MEMBER_ID)
/

ALTER TABLE TV_SCORE
    ADD CONSTRAINT FK_TV_SCORE_TP_ID_TVPROGRAM_TP FOREIGN KEY (TP_ID)
        REFERENCES TVPROGRAM (TP_ID)
/


-- FOOD_SCORE Table Create SQL
CREATE TABLE FOOD_SCORE
(
    MEMBER_ID     NUMBER    NOT NULL, 
    FOOD_ID       NUMBER    NOT NULL, 
    FOOD_SCORE    NUMBER    NULL   
)
/

COMMENT ON COLUMN FOOD_SCORE.MEMBER_ID IS '회원번호'
/

COMMENT ON COLUMN FOOD_SCORE.FOOD_ID IS '음식점번호'
/

COMMENT ON COLUMN FOOD_SCORE.FOOD_SCORE IS '평점'
/

ALTER TABLE FOOD_SCORE
    ADD CONSTRAINT FK_FOOD_SCORE_MEMBER_ID_MEMBER FOREIGN KEY (MEMBER_ID)
        REFERENCES MEMBER (MEMBER_ID)
/

ALTER TABLE FOOD_SCORE
    ADD CONSTRAINT FK_FOOD_SCORE_FOOD_ID_FOOD_FOO FOREIGN KEY (FOOD_ID)
        REFERENCES FOOD (FOOD_ID)
/


-- BOOK_SCORE Table Create SQL
CREATE TABLE BOOK_SCORE
(
    MEMBER_ID     NUMBER    NOT NULL, 
    B_ID          NUMBER    NOT NULL, 
    BOOK_SCORE    NUMBER    NULL   
)
/

COMMENT ON COLUMN BOOK_SCORE.MEMBER_ID IS '회원번호'
/

COMMENT ON COLUMN BOOK_SCORE.B_ID IS '책번호'
/

COMMENT ON COLUMN BOOK_SCORE.BOOK_SCORE IS '평점'
/

ALTER TABLE BOOK_SCORE
    ADD CONSTRAINT FK_BOOK_SCORE_MEMBER_ID_MEMBER FOREIGN KEY (MEMBER_ID)
        REFERENCES MEMBER (MEMBER_ID)
/

ALTER TABLE BOOK_SCORE
    ADD CONSTRAINT FK_BOOK_SCORE_B_ID_BOOK_B_ID FOREIGN KEY (B_ID)
        REFERENCES BOOK (B_ID)
/


-- MOVIE_SCORE Table Create SQL
CREATE TABLE MOVIE_SCORE
(
    MEMBER_ID      NUMBER    NOT NULL, 
    MOVIE_ID       NUMBER    NOT NULL, 
    MOBIE_SCORE    NUMBER    NULL, 
    WISH           NUMBER    NULL   
)
/

COMMENT ON COLUMN MOVIE_SCORE.MEMBER_ID IS '회원번호'
/

COMMENT ON COLUMN MOVIE_SCORE.MOVIE_ID IS '영화번호'
/

COMMENT ON COLUMN MOVIE_SCORE.MOBIE_SCORE IS '평점'
/

COMMENT ON COLUMN MOVIE_SCORE.WISH IS '보고싶어요'
/

ALTER TABLE MOVIE_SCORE
    ADD CONSTRAINT FK_MOVIE_SCORE_MEMBER_ID_MEMBE FOREIGN KEY (MEMBER_ID)
        REFERENCES MEMBER (MEMBER_ID)
/

ALTER TABLE MOVIE_SCORE
    ADD CONSTRAINT FK_MOVIE_SCORE_MOVIE_ID_MOVIE_ FOREIGN KEY (MOVIE_ID)
        REFERENCES MOVIE (MOVIE_ID)
/


-- FOODREGION Table Create SQL
CREATE TABLE FOODREGION
(
    REGION_ID    NUMBER    NOT NULL, 
    FOOD_ID      NUMBER    NOT NULL
)
/

COMMENT ON COLUMN FOODREGION.REGION_ID IS '지역코드'
/

COMMENT ON COLUMN FOODREGION.FOOD_ID IS '음식점번호'
/

ALTER TABLE FOODREGION
    ADD CONSTRAINT FK_FOODREGION_REGION_ID_REGION FOREIGN KEY (REGION_ID)
        REFERENCES REGION (REGION_ID)
/

ALTER TABLE FOODREGION
    ADD CONSTRAINT FK_FOODREGION_FOOD_ID_FOOD_FOO FOREIGN KEY (FOOD_ID)
        REFERENCES FOOD (FOOD_ID)
/


-- REVIEW Table Create SQL
CREATE TABLE REVIEW
(
    REVIEW_ID    NUMBER    NOT NULL, 
    MEMBER_ID    NUMBER    NOT NULL, 
    FOOD_ID      NUMBER    NOT NULL, 
    CONSTRAINT REVIEW_ID PRIMARY KEY (REVIEW_ID)
)
/

COMMENT ON COLUMN REVIEW.REVIEW_ID IS '리뷰번호'
/

COMMENT ON COLUMN REVIEW.MEMBER_ID IS '회원번호'
/

COMMENT ON COLUMN REVIEW.FOOD_ID IS '음식점번호'
/

ALTER TABLE REVIEW
    ADD CONSTRAINT FK_REVIEW_MEMBER_ID_MEMBER_MEM FOREIGN KEY (MEMBER_ID)
        REFERENCES MEMBER (MEMBER_ID)
/

ALTER TABLE REVIEW
    ADD CONSTRAINT FK_REVIEW_FOOD_ID_FOOD_FOOD_ID FOREIGN KEY (FOOD_ID)
        REFERENCES FOOD (FOOD_ID)
/


-- FOODCATEGORY Table Create SQL
CREATE TABLE FOODCATEGORY
(
    FOOD_ID        NUMBER    NOT NULL, 
    CATEGORY_ID    NUMBER    NOT NULL
)
/

COMMENT ON COLUMN FOODCATEGORY.FOOD_ID IS '음식점번호'
/

COMMENT ON COLUMN FOODCATEGORY.CATEGORY_ID IS '분류번호'
/

ALTER TABLE FOODCATEGORY
    ADD CONSTRAINT FK_FOODCATEGORY_FOOD_ID_FOOD_F FOREIGN KEY (FOOD_ID)
        REFERENCES FOOD (FOOD_ID)
/

ALTER TABLE FOODCATEGORY
    ADD CONSTRAINT FK_FOODCATEGORY_CATEGORY_ID_CA FOREIGN KEY (CATEGORY_ID)
        REFERENCES CATEGORY (CATEGORY_ID)
/


-- B_CRITIC Table Create SQL
CREATE TABLE B_CRITIC
(
    B_CR_ID      NUMBER            NOT NULL, 
    B_ID         NUMBER            NOT NULL, 
    B_CR_NAME    VARCHAR2(150)     NOT NULL, 
    B_C_COMM     VARCHAR2(1500)    NOT NULL, 
    B_C_POINT    NUMBER            NOT NULL, 
    CONSTRAINT B_CR_ID PRIMARY KEY (B_CR_ID)
)
/

CREATE SEQUENCE B_CRITIC_SEQ
START WITH 1
INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER B_CRITIC_AI_TRG
BEFORE INSERT ON B_CRITIC 
REFERENCING NEW AS NEW FOR EACH ROW 
BEGIN 
    SELECT B_CRITIC_SEQ.NEXTVAL
    INTO :NEW.B_CR_ID
    FROM DUAL;
END;
/

--DROP TRIGGER B_CRITIC_AI_TRG;
/

--DROP SEQUENCE B_CRITIC_SEQ;
/

COMMENT ON TABLE B_CRITIC IS '책비평가'
/

COMMENT ON COLUMN B_CRITIC.B_CR_ID IS '평론가번호'
/

COMMENT ON COLUMN B_CRITIC.B_ID IS '책번호'
/

COMMENT ON COLUMN B_CRITIC.B_CR_NAME IS '평론가명'
/

COMMENT ON COLUMN B_CRITIC.B_C_COMM IS '내용'
/

COMMENT ON COLUMN B_CRITIC.B_C_POINT IS '평론가별점'
/

ALTER TABLE B_CRITIC
    ADD CONSTRAINT FK_B_CRITIC_B_ID_BOOK_B_ID FOREIGN KEY (B_ID)
        REFERENCES BOOK (B_ID)
/


-- B_STORE Table Create SQL
CREATE TABLE B_STORE
(
    B_STORE_ID    NUMBER          NOT NULL, 
    B_ID          NUMBER          NOT NULL, 
    B_STORE       VARCHAR2(50)    NOT NULL, 
    B_PRICE       NUMBER          NOT NULL, 
    CONSTRAINT B_STORE_ID PRIMARY KEY (B_STORE_ID)
)
/

CREATE SEQUENCE B_STORE_SEQ
START WITH 1
INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER B_STORE_AI_TRG
BEFORE INSERT ON B_STORE 
REFERENCING NEW AS NEW FOR EACH ROW 
BEGIN 
    SELECT B_STORE_SEQ.NEXTVAL
    INTO :NEW.B_STORE_ID
    FROM DUAL;
END;
/

--DROP TRIGGER B_STORE_AI_TRG;
/

--DROP SEQUENCE B_STORE_SEQ;
/

COMMENT ON TABLE B_STORE IS '책판매'
/

COMMENT ON COLUMN B_STORE.B_STORE_ID IS '판매처번호'
/

COMMENT ON COLUMN B_STORE.B_ID IS '책번호'
/

COMMENT ON COLUMN B_STORE.B_STORE IS '판매처'
/

COMMENT ON COLUMN B_STORE.B_PRICE IS '책가격'
/

ALTER TABLE B_STORE
    ADD CONSTRAINT FK_B_STORE_B_ID_BOOK_B_ID FOREIGN KEY (B_ID)
        REFERENCES BOOK (B_ID)
/


-- B_REVIEW Table Create SQL
CREATE TABLE B_REVIEW
(
    R_ID         NUMBER           NOT NULL, 
    B_ID         NUMBER           NOT NULL, 
    MEMBER_ID    NUMBER           NOT NULL, 
    NICKNAME     VARCHAR2(150)    NOT NULL, 
    STARPOINT    NUMBER           NOT NULL, 
    SP_COMM      VARCHAR2(20)     NOT NULL, 
    CONSTRAINT R_ID PRIMARY KEY (R_ID)
)
/

CREATE SEQUENCE B_REVIEW_SEQ
START WITH 1
INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER B_REVIEW_AI_TRG
BEFORE INSERT ON B_REVIEW 
REFERENCING NEW AS NEW FOR EACH ROW 
BEGIN 
    SELECT B_REVIEW_SEQ.NEXTVAL
    INTO :NEW.R_ID
    FROM DUAL;
END;
/

--DROP TRIGGER B_REVIEW_AI_TRG;
/

--DROP SEQUENCE B_REVIEW_SEQ;
/

COMMENT ON TABLE B_REVIEW IS '책리뷰'
/

COMMENT ON COLUMN B_REVIEW.R_ID IS '리뷰글번호'
/

COMMENT ON COLUMN B_REVIEW.B_ID IS '책번호'
/

COMMENT ON COLUMN B_REVIEW.MEMBER_ID IS '회원번호'
/

COMMENT ON COLUMN B_REVIEW.NICKNAME IS '회원명'
/

COMMENT ON COLUMN B_REVIEW.STARPOINT IS '별점'
/

COMMENT ON COLUMN B_REVIEW.SP_COMM IS '내용'
/

ALTER TABLE B_REVIEW
    ADD CONSTRAINT FK_B_REVIEW_B_ID_BOOK_B_ID FOREIGN KEY (B_ID)
        REFERENCES BOOK (B_ID)
/

ALTER TABLE B_REVIEW
    ADD CONSTRAINT FK_B_REVIEW_MEMBER_ID_MEMBER_M FOREIGN KEY (MEMBER_ID)
        REFERENCES MEMBER (MEMBER_ID)
/


-- MOVIEREPLY Table Create SQL
CREATE TABLE MOVIEREPLY
(
    REPLY_ID         NUMBER            NOT NULL, 
    BOARD_ID         NUMBER            NOT NULL, 
    MEMBER_ID        NUMBER            NOT NULL, 
    REPLY_CONTENT    VARCHAR2(1000)    NOT NULL, 
    REPLY_DATE       DATE              NOT NULL, 
    CONSTRAINT REPLY_ID PRIMARY KEY (REPLY_ID)
)
/

CREATE SEQUENCE MOVIEREPLY_SEQ
START WITH 1
INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER MOVIEREPLY_AI_TRG
BEFORE INSERT ON MOVIEREPLY 
REFERENCING NEW AS NEW FOR EACH ROW 
BEGIN 
    SELECT MOVIEREPLY_SEQ.NEXTVAL
    INTO :NEW.REPLY_ID
    FROM DUAL;
END;
/

--DROP TRIGGER MOVIEREPLY_AI_TRG;
/

--DROP SEQUENCE MOVIEREPLY_SEQ;
/

COMMENT ON TABLE MOVIEREPLY IS '영화 댓글'
/

COMMENT ON COLUMN MOVIEREPLY.REPLY_ID IS '댓글아이디'
/

COMMENT ON COLUMN MOVIEREPLY.BOARD_ID IS '게시판아이디'
/

COMMENT ON COLUMN MOVIEREPLY.MEMBER_ID IS '회원번호'
/

COMMENT ON COLUMN MOVIEREPLY.REPLY_CONTENT IS '댓글내용'
/

COMMENT ON COLUMN MOVIEREPLY.REPLY_DATE IS '날짜'
/

ALTER TABLE MOVIEREPLY
    ADD CONSTRAINT FK_MOVIEREPLY_MEMBER_ID_MEMBER FOREIGN KEY (MEMBER_ID)
        REFERENCES MEMBER (MEMBER_ID)
/

ALTER TABLE MOVIEREPLY
    ADD CONSTRAINT FK_MOVIEREPLY_BOARD_ID_MOVIEBO FOREIGN KEY (BOARD_ID)
        REFERENCES MOVIEBOARD (BOARD_ID)
/


-- REPLY Table Create SQL
CREATE TABLE REPLY
(
    TP_REPLYID     NUMBER           NOT NULL, 
    TP_BOARDID     NUMBER           NOT NULL, 
    R_WRITER     VARCHAR2(50)     NOT NULL, 
    R_CONTENT    VARCHAR2(300)    NOT NULL, 
    R_REGDATE    DATE             NOT NULL, 
    R_UPDOWN     NUMBER           NOT NULL, 
    CONSTRAINT TP_REPLYID PRIMARY KEY (TP_REPLYID)
)
/

CREATE SEQUENCE REPLY_SEQ
START WITH 1
INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER REPLY_AI_TRG
BEFORE INSERT ON REPLY 
REFERENCING NEW AS NEW FOR EACH ROW 
BEGIN 
    SELECT REPLY_SEQ.NEXTVAL
    INTO :NEW.TP_REPLYID
    FROM DUAL;
END;
/

--DROP TRIGGER REPLY_AI_TRG;
/

--DROP SEQUENCE REPLY_SEQ;
/

COMMENT ON TABLE REPLY IS 'TV프로그램 댓글'
/

COMMENT ON COLUMN REPLY.TP_REPLYID IS '댓글번호'
/

COMMENT ON COLUMN REPLY.BOARD_ID IS '게시글번호'
/

COMMENT ON COLUMN REPLY.R_WRITER IS '작성자'
/

COMMENT ON COLUMN REPLY.R_CONTENT IS '내용'
/

COMMENT ON COLUMN REPLY.R_REGDATE IS '등록일자'
/

COMMENT ON COLUMN REPLY.R_UPDOWN IS '댓글좋아요'
/

ALTER TABLE REPLY
    ADD CONSTRAINT FK_REPLY_TP_BOARDID_BOARD_BOARD_ FOREIGN KEY (TP_BOARDID)
        REFERENCES BOARD (TP_BOARDID)
/

